import me.champeau.jmh.JmhBytecodeGeneratorTask
import org.gradle.internal.os.OperatingSystem
import org.ajoberstar.grgit.Grgit
import java.time.Duration

plugins {
    id 'java'
    id 'me.champeau.jmh' version '0.7.1'
    id 'org.ajoberstar.grgit' version '5.2.0'
    id 'pl.allegro.tech.build.axion-release' version '1.15.5'
    id 'io.github.gradle-nexus.publish-plugin' version '1.3.0'
    id 'maven-publish'
    id 'signing'
}

scmVersion {
    versionCreator('versionWithBranch')
    tag {
        prefix = ''
    }
}

group = 'com.creanga'
version = scmVersion.version

repositories {
    mavenCentral()
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }

    withJavadocJar()
    withSourcesJar()
}

ext {
    junitVersion = '5.9.1'
}

dependencies {

    jmhImplementation("org.lz4:lz4-java:1.8.0")
    jmhImplementation("com.github.luben:zstd-jni:1.5.5-11")

    jmhImplementation("org.simdjson:simdjson-java:0.1.0")
    jmhImplementation("com.fasterxml.jackson.core:jackson-databind:2.16.1")
    jmhImplementation("com.fasterxml.jackson.dataformat:jackson-dataformat-smile:2.16.1")
    jmhImplementation("com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:2.16.1")
    jmhImplementation("com.fasterxml.jackson.dataformat:jackson-dataformat-ion:2.16.1")

    jmhImplementation("org.msgpack:jackson-dataformat-msgpack:0.9.7")

    jmhImplementation("com.google.guava:guava:32.1.2-jre")
}


tasks.withType(JmhBytecodeGeneratorTask).configureEach {
    jvmArgs.set(["--add-modules=jdk.incubator.vector"])
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs.add("--add-modules=jdk.incubator.vector")
}

compileTestJava {
    options.compilerArgs += [
            '--add-modules', 'jdk.incubator.vector'
    ]
}

javadoc.options {
    addStringOption('-add-modules', 'jdk.incubator.vector')
}

jmh {
    fork = 1
    warmupIterations = 3
    iterations = 5
    jvmArgsPrepend = [
            '--add-modules=jdk.incubator.vector'
    ]
    if (getBooleanProperty('jmh.profilersEnabled', false)) {
        if (OperatingSystem.current().isLinux()) {
            profilers = [
                    'perf',
                    'perfasm:intelSyntax=true',
                    'async:verbose=true;output=flamegraph;event=cpu;dir=./profilers/async;libPath=' + getAsyncProfilerLibPath('LD_LIBRARY_PATH')
            ]
        } else if (OperatingSystem.current().isMacOsX()) {
            profilers = [
                    'async:verbose=true;output=flamegraph;event=cpu;dir=./profilers/async;libPath=' + getAsyncProfilerLibPath('DYLD_LIBRARY_PATH')
            ]
        }
    }
    if (project.hasProperty('jmh.includes')) {
        includes = [project.findProperty('jmh.includes')]
    }
}

def getBooleanProperty(String name, boolean defaultValue) {
    Boolean.valueOf((project.findProperty(name) ?: defaultValue) as String)
}

static def getAsyncProfilerLibPath(String envVarName) {
    System.getenv(envVarName) ?: System.getProperty('java.library.path')
}
